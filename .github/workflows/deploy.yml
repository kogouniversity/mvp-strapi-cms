name: Deploy

on:
    workflow_dispatch:


env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  EC2_REMOTE_HOST: ${{ vars.EC2_REMOTE_HOST }}
  EC2_REMOTE_USER: ${{ vars.EC2_REMOTE_USER }}
  ECR_REPOSITORY_DEV: ${{ vars.ECR_REPOSITORY_DEV }}
  ECR_REPOSITORY_STG: ${{ vars.ECR_REPOSITORY_STG }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  APP_KEYS: ${{ secrets.APP_KEYS }}
  TRANSFER_TOKEN_SALT: ${{ secrets.TRANSFER_TOKEN_SALT }}
  ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
  API_TOKEN_SALT: ${{ secrets.API_TOKEN_SALT }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}


jobs:
    deploy:
        runs-on: ubuntu-latest

        strategy:
          matrix:
            node-version: [ '20.10.0' ]

        steps:
            - uses: actions/checkout@v3
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'

            # Temporary workaround for a remote environment with insufficient RAM size
            # =====================================
            - name: Installing Dependencies
              run: npm install
            - name: Create a Development Build
              run: NODE_ENV=development npm run build
            - name: Remove node modules
              run: rm -rf node_modules
            # =====================================

            - name: \[EC2] Setup SSH
              uses: shimataro/ssh-key-action@v2
              with:
                key: $EC2_SSH_KEY
                known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
            - name: Adding Known Hosts
              run: ssh-keyscan -H ${{ env.EC2_REMOTE_HOST }} >> ~/.ssh/known_hosts

            - name: \[EC2] Run Pre-Deploy
              uses: appleboy/ssh-action@v0.1.10
              with:
                host: ${{ env.EC2_REMOTE_HOST }}
                username: ${{ env.EC2_REMOTE_USER }}
                key: ${{ env.EC2_SSH_KEY }}
                command_timeout: 30m
                script: |
                  bash kogo/scripts/pre-deploy.sh

            - name: \[EC2] Deploy with RSync to test server
              run:
                rsync -vrm --exclude 'node_modules' . ${{ env.EC2_REMOTE_USER }}@${{ env.EC2_REMOTE_HOST }}:/home/${{ env.EC2_REMOTE_USER }}/kogo/kogo-cms

            - name: \[EC2] Run Post-Deploy
              uses: appleboy/ssh-action@v0.1.10
              with:
                host: ${{ env.EC2_REMOTE_HOST }}
                username: ${{ env.EC2_REMOTE_USER }}
                key: ${{ env.EC2_SSH_KEY }}
                command_timeout: 30m
                script: |
                  bash kogo/scripts/post-deploy.sh

            - name: \[ECR] Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
              with:
                aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}

            - name: \[ECR] Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

            - name: \[ECR] Build and push image to Amazon ECR DEV
              id: build-image-for-dev
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                # Build a docker container and
                # push it to ECR
                docker build \
                  --build-arg NODE_ENV=development \
                  --build-arg APP_KEYS=${{ env.APP_KEYS }} \
                  --build-arg TRANSFER_TOKEN_SALT=${{ env.TRANSFER_TOKEN_SALT }} \
                  --build-arg ADMIN_JWT_SECRET=${{ env.ADMIN_JWT_SECRET }} \
                  --build-arg API_TOKEN_SALT=${{ env.API_TOKEN_SALT }} \
                  --build-arg JWT_SECRET=${{ env.JWT_SECRET }} \
                  -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_DEV }}:$IMAGE_TAG .
                docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_DEV }}:$IMAGE_TAG
                echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_DEV }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

            - name: \[ECR] Build and push image to Amazon ECR STG
              id: build-image-for-stg
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                IMAGE_TAG: ${{ github.sha }}
              run: |
                # Build a docker container and
                # push it to ECR
                docker build \
                  --build-arg NODE_ENV=production \
                  --build-arg APP_KEYS=${{ env.APP_KEYS }} \
                  --build-arg TRANSFER_TOKEN_SALT=${{ env.TRANSFER_TOKEN_SALT }} \
                  --build-arg ADMIN_JWT_SECRET=${{ env.ADMIN_JWT_SECRET }} \
                  --build-arg API_TOKEN_SALT=${{ env.API_TOKEN_SALT }} \
                  --build-arg JWT_SECRET=${{ env.JWT_SECRET }} \
                  -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_STG }}:$IMAGE_TAG .
                docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_STG }}:$IMAGE_TAG
                echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_STG }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
